import Rhino
from helpers import algorithms, keys
from helpers.geometry import ClosedPolyline
import rhinoscriptsyntax as rs
import logging
import scriptcontext as sc
from components.beam import Beam
from components.plate import Plate
from components.panel import Panel
from components.dowel import Dowel
import Rhino.Geometry as rg
import components.repository as repo





picked_ids = rs.GetObjects("Select Panels to transform")
picked_objs = [sc.doc.Objects.FindId(id) for id in picked_ids]

group_ids = set()
for obj in picked_objs:
    groups = obj.Attributes.GetGroupList()
    for group in groups:
        group_ids.add(group)

panels = [repo.read_component(group_index) for group_index in group_ids]

point_grid = []
surfaces_on_grid = []
oriented_surfaces = []

DivY = 3
DivX = int(len(panels)/DivY)

for x in range(0, DivX):
    for y in range(0, DivY):
        point = rs.AddPoint((x*1500, y*1500, 0))
        point_grid.append(point)

def TransformObjects(panels):
    for i , panel in enumerate(panels):
        # center = rs.AddPoint(rs.SurfaceAreaCentroid((panels)[i])[0])
        # param = rs.SurfaceClosestPoint(panels[i], center)
        # normal = rs.SurfaceNormal(panels[i], param)
        # plane = rs.PlaneFromNormal(center, normal)


        plane = panel.plane
        cplane = rs.ViewCPlane()
        cplane.Origin = rs.coerce3dpoint(point_grid[i])
        matrix = rg.Transform.PlaneToPlane(plane, cplane)
        panel.transform(matrix)
        
        # surface_on_grid = rs.MoveObject(oriented_surfaces[i], point_grid[i])
        # surfaces_on_grid.append(surface_on_grid)

    return surfaces_on_grid
        
if __name__=="__main__":
    a = TransformObjects(panels)
    
    repo.commit_changes()
